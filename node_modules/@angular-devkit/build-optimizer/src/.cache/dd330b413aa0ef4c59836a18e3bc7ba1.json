{"remainingRequest":"/Users/charlie/Documents/Pizza/Pizza42SAP/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/charlie/Documents/Pizza/Pizza42SAP/node_modules/store/storages/memoryStorage.js","dependencies":[{"path":"/Users/charlie/Documents/Pizza/Pizza42SAP/node_modules/store/storages/memoryStorage.js","mtime":1497890654000},{"path":"/Users/charlie/Documents/Pizza/Pizza42SAP/node_modules/cache-loader/dist/cjs.js","mtime":1531542006000},{"path":"/Users/charlie/Documents/Pizza/Pizza42SAP/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["// memoryStorage is a useful last fallback to ensure that the store\n// is functions (meaning store.get(), store.set(), etc will all function).\n// However, stored values will not persist when the browser navigates to\n// a new page or reloads the current page.\n\nmodule.exports = {\n\tname: 'memoryStorage',\n\tread: read,\n\twrite: write,\n\teach: each,\n\tremove: remove,\n\tclearAll: clearAll,\n}\n\nvar memoryStorage = {}\n\nfunction read(key) {\n\treturn memoryStorage[key]\n}\n\nfunction write(key, data) {\n\tmemoryStorage[key] = data\n}\n\nfunction each(callback) {\n\tfor (var key in memoryStorage) {\n\t\tif (memoryStorage.hasOwnProperty(key)) {\n\t\t\tcallback(memoryStorage[key], key)\n\t\t}\n\t}\n}\n\nfunction remove(key) {\n\tdelete memoryStorage[key]\n}\n\nfunction clearAll(key) {\n\tmemoryStorage = {}\n}\n",null]}