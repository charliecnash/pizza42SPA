{"remainingRequest":"/Users/charlie/Documents/Pizza/Pizza42SAP/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/charlie/Documents/Pizza/Pizza42SAP/node_modules/auth0-js/src/web-auth/transaction-manager.js","dependencies":[{"path":"/Users/charlie/Documents/Pizza/Pizza42SAP/node_modules/auth0-js/src/web-auth/transaction-manager.js","mtime":1528403123000},{"path":"/Users/charlie/Documents/Pizza/Pizza42SAP/node_modules/cache-loader/dist/cjs.js","mtime":1531542006000},{"path":"/Users/charlie/Documents/Pizza/Pizza42SAP/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var random = require('../helper/random');\nvar storage = require('../helper/storage');\nvar times = require('../helper/times');\n\nvar DEFAULT_NAMESPACE = 'com.auth0.auth.';\n\nfunction TransactionManager(options) {\n  options = options || {};\n  this.namespace = options.namespace || DEFAULT_NAMESPACE;\n  this.keyLength = options.keyLength || 32;\n}\n\nTransactionManager.prototype.process = function(options) {\n  if (!options.responseType) {\n    throw new Error('responseType is required');\n  }\n  var lastUsedConnection = options.realm || options.connection;\n  var responseTypeIncludesIdToken = options.responseType.indexOf('id_token') !== -1;\n\n  var transaction = this.generateTransaction(\n    options.appState,\n    options.state,\n    options.nonce,\n    lastUsedConnection,\n    responseTypeIncludesIdToken\n  );\n  if (!options.state) {\n    options.state = transaction.state;\n  }\n\n  if (responseTypeIncludesIdToken && !options.nonce) {\n    options.nonce = transaction.nonce;\n  }\n\n  return options;\n};\n\nTransactionManager.prototype.generateTransaction = function(\n  appState,\n  state,\n  nonce,\n  lastUsedConnection,\n  generateNonce\n) {\n  state = state || random.randomString(this.keyLength);\n  nonce = nonce || (generateNonce ? random.randomString(this.keyLength) : null);\n\n  storage.setItem(\n    this.namespace + state,\n    {\n      nonce: nonce,\n      appState: appState,\n      state: state,\n      lastUsedConnection: lastUsedConnection\n    },\n    times.MINUTES_30\n  );\n  return {\n    state: state,\n    nonce: nonce\n  };\n};\n\nTransactionManager.prototype.getStoredTransaction = function(state) {\n  var transactionData;\n\n  transactionData = storage.getItem(this.namespace + state);\n  this.clearTransaction(state);\n  return transactionData;\n};\n\nTransactionManager.prototype.clearTransaction = function(state) {\n  storage.removeItem(this.namespace + state);\n};\n\nmodule.exports = TransactionManager;\n",null]}